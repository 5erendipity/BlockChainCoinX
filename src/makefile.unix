# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Enable UPnP support (set to 0 by default, can be disabled with USE_UPNP:=-)
USE_UPNP:=0

# Specify paths for OpenSSL 1.0.2u, required for compatibility with Ubuntu 20.04
# Installed in /usr/local/openssl-1.0.2 to avoid conflicts with system OpenSSL
OPENSSL_INCLUDE_PATH=/usr/local/openssl-1.0.2/include
OPENSSL_LIB_PATH=/usr/local/openssl-1.0.2/lib

# Specify paths for Boost 1.65.1, necessary for compatibility with the codebase
# Installed in /usr/local/boost-1.65 to ensure the correct version is used
BOOST_INCLUDE_PATH=/usr/local/boost-1.65/include
BOOST_LIB_PATH=/usr/local/boost-1.65/lib

# Specify paths for Berkeley DB 4.8, required for wallet functionality
# Installed in /usr/local/db-4.8 to match the version used in Ubuntu 18.04
BDB_INCLUDE_PATH=/usr/local/db-4.8/include
BDB_LIB_PATH=/usr/local/db-4.8/lib

# Set empty Boost library suffix (no -mt or similar required for Boost 1.65.1)
BOOST_LIB_SUFFIX=

LINK:=$(CXX)
ARCH:=$(shell lscpu | head -n 1 | awk '{print $2}')

# Define BOOST_SPIRIT_THREADSAFE for thread-safe parsing
DEFS=-DBOOST_SPIRIT_THREADSAFE

# Include paths for compilation, using custom OpenSSL, Boost, and Berkeley DB
DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH))

LMODE = dynamic
LMODE2 = dynamic
ifdef STATIC
	LMODE = static
	ifeq (${STATIC}, all)
		LMODE2 = static
	endif
endif

# Link against Boost, Berkeley DB, and OpenSSL libraries
# Added boost_chrono for compatibility with certain RPC functions
LIBS += \
 -Wl,-B$(LMODE) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l boost_chrono$(BOOST_LIB_SUFFIX) \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l ssl \
   -l crypto

# Enable MiniUPnPc for UPnP support if USE_UPNP is not disabled
ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBS += -l miniupnpc
	DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

# Additional system libraries (zlib, dl, pthread)
LIBS+= \
 -Wl,-B$(LMODE2) \
   -l z \
   -l dl \
   -l pthread

# Hardening options to improve security
# Workaround for Ubuntu bug #691722 (stack-protector issue)
HARDENING=-fno-stack-protector

# Enable stack canaries to detect buffer overflows
HARDENING+=-fstack-protector-all -Wstack-protector

# Make global offset table read-only and bind symbols at load time
LDHARDENING+=-Wl,-z,relro -Wl,-z,now

# Enable Position Independent Executable (PIE) if specified
ifdef PIE
	HARDENING+=-fPIE
	LDHARDENING+=-pie
endif

# Enable fortify source for additional buffer overflow checks
HARDENING+=-D_FORTIFY_SOURCE=2

# Enable debug symbols
DEBUGFLAGS=-g

# Enable SSE2 for i686 architecture
ifeq (${ARCH}, i686)
	EXT_OPTIONS=-msse2
endif

# Compiler flags, including -Wno-nonnull to suppress warnings in bitcoinrpc.cpp
# This is necessary for successful compilation on Ubuntu 20.04 with GCC
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter -Wno-deprecated-copy -Wno-nonnull \
	$(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# Linker flags
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

# Object files for compilation
OBJS= \
	obj/alert.o \
	obj/version.o \
	obj/checkpoints.o \
	obj/netbase.o \
	obj/addrman.o \
	obj/crypter.o \
	obj/key.o \
	obj/db.o \
	obj/init.o \
	obj/irc.o \
	obj/keystore.o \
	obj/miner.o \
	obj/main.o \
	obj/net.o \
	obj/protocol.o \
	obj/bitcoinrpc.o \
	obj/rpcdump.o \
	obj/rpcnet.o \
	obj/rpcmining.o \
	obj/rpcwallet.o \
	obj/rpcblockchain.o \
	obj/rpcrawtransaction.o \
	obj/script.o \
	obj/sync.o \
	obj/util.o \
	obj/wallet.o \
	obj/walletdb.o \
	obj/noui.o \
	obj/kernel.o \
	obj/pbkdf2.o \
	obj/scrypt.o \
	obj/scrypt-arm.o \
	obj/scrypt-x86.o \
	obj/scrypt-x86_64.o \
	obj/zerocoin/Accumulator.o \
	obj/zerocoin/AccumulatorProofOfKnowledge.o \
	obj/zerocoin/Coin.o \
	obj/zerocoin/CoinSpend.o \
	obj/zerocoin/Commitment.o \
	obj/zerocoin/ParamGeneration.o \
	obj/zerocoin/Params.o \
	obj/zerocoin/SerialNumberSignatureOfKnowledge.o \
	obj/zerocoin/SpendMetaData.o \
	obj/zerocoin/ZeroTest.o

all: blockchaincoinxd

# Include LevelDB libraries
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; make libleveldb.a libmemenv.a; cd ..;
obj/txdb-leveldb.o: leveldb/libleveldb.a

# Auto-generated dependencies
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

# Compile assembly files for scrypt
obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-arm.o: scrypt-arm.S
	$(CXX) -c $(xCXXFLAGS) -MMD -o $@ $<

# Compile C++ files
obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

# Compile Zerocoin C++ files
obj/zerocoin/%.o: zerocoin/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

# Link the executable
blockchaincoinxd: $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) -o $@ $^ $(xLDFLAGS) $(LIBS)

# Clean build artifacts
clean:
	-rm -f blockchaincoinxd
	-rm -f obj/*.o
	-rm -f obj/zerocoin/*.o
	-rm -f obj/*.P
	-rm -f obj/zerocoin/*.P
	-rm -f obj/build.h

FORCE:
